<?php

namespace Phpteda\Test\Reflection;

use Mockery;
use Phpteda\Reflection\MethodRetriever;
use Phpteda\Reflection\Method\Method;
use Phpteda\Reflection\AnnotationReader;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-11 at 23:13:04.
 */
class MethodRetrieverTest extends \PHPUnit_Framework_TestCase
{
    /** @var \Mockery\MockInterface | \Phpteda\Reflection\ReflectionClass */
    protected $reflectionClass;


    protected function setUp()
    {
        $this->reflectionMethod = Mockery::mock('\ReflectionMethod')->shouldIgnoreMissing();
        $this->reflectionMethod->shouldReceive('getName')->andReturn('nameOfMethod');
        $this->reflectionMethod->shouldReceive('getParameters')->andReturn(array('nameOfParameter'));

        $this->annotationReader = Mockery::mock('\Phpteda\Reflection\AnnotationReader');
        $this->annotationReader->shouldReceive('getAnnotations')->andReturn(array('method' => 'method string foo'));
        $this->annotationReader->shouldReceive('parseMagicMethodAnnotation')->andReturn(
            array(
                'returnType' => 'returnType',
                'name' => 'magicMethodName',
                'parameterType' => 'parameterType',
                'parameterName' => 'parameterName',
                'description' => 'description'
            )
        );

        $this->reflectionClass = Mockery::mock('\Phpteda\Reflection\ReflectionClass')->shouldIgnoreMissing();
        $this->reflectionClass->shouldReceive('getAnnotationReader')->andReturn($this->annotationReader);
        $this->reflectionClass->shouldReceive('getMethods')->andReturn(array($this->reflectionMethod));
    }

    protected function tearDown()
    {
        Mockery::close();
    }

    public function testGetAllPublicMethods()
    {
        $retriever = new MethodRetriever($this->reflectionClass);

        $actualMethods = $retriever->getAllPublicMethods();

        $expectedMethods = array(
            new Method(
                array(
                    'returnType' => 'returnType',
                    'name' => 'magicMethodName',
                    'parameterType' => 'parameterType',
                    'parameterName' => 'parameterName',
                    'description' => 'description'
                )
            ),
            new Method(
                array(
                    'returnType' => null,
                    'name' => 'nameOfMethod',
                    'parameterType' => null,
                    'parameterName' => 'nameOfParameter',
                    'description' => null
                )
            )
        );

        $this->assertEquals($expectedMethods, $actualMethods);
    }


    public function testFilteringOfIgnoredMethods()
    {
        $this->markTestIncomplete();
    }
}
